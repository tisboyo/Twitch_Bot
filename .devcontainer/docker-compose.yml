version: '3'
services:
  # Update this to the name of the service you want to work with in your docker-compose.yml file
  bot:
    # If you want add a non-root user to your Dockerfile, you can use the "remoteUser"
    # property in devcontainer.json to cause VS Code its sub-processes (terminals, tasks,
    # debugging) to execute as the user. Uncomment the next line if you want the entire
    # container to run as this user instead. Note that, on Linux, you may need to
    # ensure the UID and GID of the container user you create matches your local user.
    # See https://aka.ms/vscode-remote/containers/non-root for details.
    #
    # user: vscode

    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer
    # folder. Note that the path of the Dockerfile and context is relative to the *primary*
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    #
    # build:
    #   context: .
    #   dockerfile: .devcontainer/Dockerfile

    volumes:
      # Update this to wherever you want VS Code to mount the folder of your project
      - .:/workspace/

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      - /var/run/docker.sock:/var/run/docker.sock
      - ./models.py:/workspace/web/models.py
      - ./web/web_user_db.json:/workspace/web/web_user_db.json

    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      WEB_API_KEY: ${WEB_API_KEY}
      TWITCH_SIGNING_SECRET: ${TWITCH_SIGNING_SECRET}
      WEB_COOKIE_KEY: ${WEB_COOKIE_KEY}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      SESSION_KEY: ${SESSION_KEY}

    ports:
      - 5000:5000 #Webserver testings
    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"
