version: "3"

services:
  bot:
    container_name: twitchbot_bot
    build:
      context: ./bot/
      args: #Passing these in as Args allow it to be used during the build process
        PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
        PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}

    restart: unless-stopped
    depends_on:
      - mysql
    volumes:
      - ./bot/configs:/workspace/bot/configs/
      - ./bot/irc_logs:/workspace/bot/irc_logs/
      - ./bot/pubsub_logs:/workspace/bot/pubsub_logs/
      - ./bot/jsons:/workspace/bot/jsons/
      - ./models.py:/workspace/bot/models.py
      - ./mysql/db_backup:/db_backup
      - ./questions.txt:/workspace/bot/questions.txt
      - ./mqtt_logger/logs:/workspace/bot/mqtt_logs/
      # - ./bot:/workspace/bot/
    environment:
      client_id: ${TWITCH_CLIENT_ID} #Lower cased because a framework issue
      client_secret: ${TWITCH_CLIENT_SECRET}
      nick: ${TWITCH_NICK}
      oauth: ${TWITCH_OAUTH}
      PUBSUB_OAUTH: ${TWITCH_PUBSUB_OAUTH}
      ADAFRUIT_IO_USER: ${ADAFRUIT_IO_USER}
      ADAFRUIT_IO_KEY: ${ADAFRUIT_IO_KEY}
      ENABLE_AIO_BRIDGE: ${ENABLE_AIO_BRIDGE}
      WEB_HOSTNAME: ${WEB_HOSTNAME}
      TWITCH_CHANNEL: ${TWITCH_CHANNEL}
      MQTT_USER: ${MQTT_USER}
      MQTT_KEY: ${MQTT_KEY}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TO_DO_WEBHOOK: ${TO_DO_WEBHOOK}


    labels:
      - "deck-chores.process-dropbox.command=sh -c /workspace/bot/dropbox_sync.py &> /proc/1/fd/1"
      - "deck-chores.process-dropbox.cron=* * * * * * 10 0" #Hourly @ 10 after

  webserver:
    container_name: twitchbot_webserver
    build:
      context: ./web/
      args: #Passing these in as Args allow it to be used during the build process
        PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
        PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}

    restart: unless-stopped
    expose:
      - 5000
    depends_on:
      - mysql

    volumes:
      - ./web/web_user_db.json:/workspace/web/web_user_db.json
      - ./models.py:/workspace/web/models.py
      - ./web/static_files/trivia/images:/workspace/web/static_files/trivia/images
      - ./web/static_files/trivia/sounds:/workspace/web/static_files/trivia/sounds
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`${WEB_HOSTNAME}`)"
      - "traefik.http.routers.fastapi.tls=true"
      - "traefik.http.routers.fastapi.tls.certresolver=letsencrypt"
      - "deck-chores.webhook-subscribe.command=sh -c /workspace/web/eventsub_manage.py &> /proc/1/fd/1"
      - "deck-chores.webhook-subscribe.interval=daily"

    environment:
      WEB_HOSTNAME: ${WEB_HOSTNAME}
      CLIENT_ID: ${TWITCH_CLIENT_ID}
      CLIENT_SECRET: ${TWITCH_CLIENT_SECRET}
      PUBSUB_OAUTH: ${TWITCH_PUBSUB_OAUTH}
      TWITCH_CHANNEL: ${TWITCH_CHANNEL}
      ADAFRUIT_IO_USER: ${ADAFRUIT_IO_USER}
      ADAFRUIT_IO_KEY: ${ADAFRUIT_IO_KEY}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      WEB_API_KEY: ${WEB_API_KEY}
      TWITCH_SIGNING_SECRET: ${TWITCH_SIGNING_SECRET}
      WEB_COOKIE_KEY: ${WEB_COOKIE_KEY}
      MQTT_USER: ${MQTT_USER}
      MQTT_KEY: ${MQTT_KEY}
      FORWARDED_ALLOW_IPS: '*'
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      SESSION_KEY: ${SESSION_KEY}
      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}

    # Uncommenting these disables the requirement to re-build on updates, useful for dev.
    # volumes:
    #   - ./web:/workspace/web/

  mysql:
    container_name: twitchbot_mysql
    image: mysql:latest
    restart: unless-stopped
    volumes:
      - ./mysql/db_data:/var/lib/mysql
      - ./mysql/mysql.cnf:/etc/mysql/conf.d/custom.cnf
      - ./mysql/db_backup:/db_backup
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_TEST_LOGIN_FILE: /var/lib/mysql/.mylogin.cnf #Run mysql_config_editor set -p in container to set password
      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}

    cap_add:
      - SYS_NICE # CAP_SYS_NICE

    labels:
      - deck-chores.mysqldump.command=sh -c "mysqldump --all-databases > /db_backup/twitchbot.sql"
      - deck-chores.mysqldump.cron=* * * * * 5 0 0 # Daily at 5am
      - deck-chores.mysqldump-weekly.command=sh -c "mysqldump --all-databases > /db_backup/twitchbot-weekly.sql"
      - deck-chores.mysqldump-weekly.cron=* * * * sat 3 0 0 # Saturday 3am
      - deck-chores.mysqldump-monthly.command=sh -c "mysqldump --all-databases > /db_backup/twitchbot-monthly.sql"
      - deck-chores.mysqldump-monthly.cron= * * 1 * * 1 0 0 # Monthly on the 1st, 1am

  traefik:
    container_name: twitchbot_traefik
    image: traefik:v2.3
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.toml:/etc/traefik/traefik.toml"
      - "./traefik/acme.json:/acme.json"
      - "./traefik/log:/var/log"
    environment:
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: "TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL"
      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}

  fail2ban:
    container_name: twitchbot_fail2ban
    image: crazymax/fail2ban:latest
    network_mode: "host"
    environment:
      F2B_DB_PURGE_AGE: "1d"
      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}
    cap_add:
      - NET_ADMIN
      - NET_RAW
    restart: unless-stopped
    volumes:
      - ./traefik/log:/var/log/traefik:ro
      - ./fail2ban/data:/data

  chores:
    container_name: twitchbot_chores
    image: funkyfuture/deck-chores:1
    restart: unless-stopped
    environment:
      TIMEZONE: America/Chicago
      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  mqtt:
    container_name: twitchbot_mqtt
    image: eclipse-mosquitto:2-openssl
    restart: unless-stopped
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
      - ./traefik/certs/${WEB_HOSTNAME}:/mosquitto/certs/site
      - ./traefik/certs/private/:/mosquitto/certs/private
    environment:
      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}
    ports:
      - 8883:8883
      - 9883:9883

    expose:
      - 1883 # For inter-container communication, and is not over SSL. Do not open to host

  mqtt_logger:
    container_name: twitchbot_mqtt_logger
    build:
      context: ./mqtt_logger/
      args: #Passing these in as Args allow it to be used during the build process
        PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
        PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}

    restart: unless-stopped
    depends_on:
      - mqtt
    volumes:
      - ./mqtt_logger/logs:/workspace/mqtt_logger/logs

    environment:
      MQTT_USER: ${MQTT_USER}
      MQTT_KEY: ${MQTT_KEY}
      WEB_HOSTNAME: ${WEB_HOSTNAME}

  traefik-certs-dumper:
    image: ldez/traefik-certs-dumper:v2.7.4
    environment:
      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading
      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}
    entrypoint: sh -c '
      apk add jq
      ; while ! [ -e /data/acme.json ]
      || ! [ `jq ".[] | .Certificates | length" /data/acme.json` != 0 ]; do
      sleep 1
      ; done
      && traefik-certs-dumper file --clean=false --version v2 --watch
      --domain-subdir --crt-name=certificate --key-name=privkey
      --source /data/acme.json --dest /data/certs'
    volumes:
      - ./traefik:/data
